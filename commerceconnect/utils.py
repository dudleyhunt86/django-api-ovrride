import hashlib

from django.conf import settings
from django.contrib import auth
from django.utils.importlib import import_module
from rest_framework import serializers

import oscar.models.fields


def overridable(name, default):
    """
    Seems useless but this is for readability
    """
    return getattr(settings, name, default)

class OscarSerializer(object):
    field_mapping = dict(serializers.ModelSerializer.field_mapping, **{
        oscar.models.fields.NullCharField: serializers.CharField
    })
    
    def to_native(self, obj):
        num_fields = len(self.get_fields())
        native = super(OscarSerializer, self).to_native(obj)

        if num_fields == 1:
            _, val = next(native.iteritems())
            return val
        
        return native
    
class OscarModelSerializer(OscarSerializer, serializers.ModelSerializer):
    """
    Correctly map oscar fields to serializer fields.
    """
    
class OscarHyperlinkedModelSerializer(OscarSerializer, serializers.HyperlinkedModelSerializer):
    """
    Correctly map oscar fields to serializer fields.
    """


def get_domain(request):
    return request.get_host().split(':')[0]
    

def login_and_upgrade_session(request, user):
    "Upgrade anonymous session to authenticated session"
    parsed_session_uri = getattr(request, 'parsed_session_uri', None)

    if parsed_session_uri is not None:

        assert(parsed_session_uri['type'] == 'ANON')

        # change anonymous session to authenticated
        parsed_session_uri['type'] = "AUTH"
        session_id = session_id_from_parsed_session_uri(parsed_session_uri)

        # wipe out old anonymous session without creating a new one
        request.session.clear()
        request.session.delete()

        # start session with new session id
        request.session = start_or_resume(session_id)

        # by doing this we avoid a new session id being generated by django.
        request.session[auth.SESSION_KEY] = user.pk

    # now login so the session can be used for authentication purposes.
    auth.login(request, user)
    request.session.save()


def session_id_from_parsed_session_uri(parsed_session_uri):
    session_id_base = "SID:%(type)s:%(realm)s:%(session_id)s" % parsed_session_uri
    return hashlib.sha1(session_id_base + settings.SECRET_KEY).hexdigest()


def start_or_resume(session_id):
    engine = import_module(settings.SESSION_ENGINE)
    session = engine.SessionStore(session_id)

    if not session.exists(session_id):
        session.save(must_create=True)
    
    return session


